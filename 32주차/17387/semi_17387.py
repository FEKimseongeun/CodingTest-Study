# 2차원 좌표 평면 위의 두 선분 L1, L2가 주어졌을 때, 두 선분이 교차하는지 아닌지 구하기

def ccw(p1, p2, p3):
    # 세 점으로 만들 수 있는 선분 2개로 외적
    a = p1[0] * p2[1] + p2[0] * p3[1] + p3[0] * p1[1]
    b = p1[1] * p2[0] + p2[1] * p3[0] + p3[1] * p1[0]

    # z 좌표(a-b)의 부호 값을 이용해 판단
    if a-b == 0:     # 일직선 : 두 선분이 평행
        return 0
    elif a-b > 0:    # 반 시계 방향 : 두 선분이 교치
        return 1
    else:            # 시계 방향 : 두 선분이 교차
        return -1

x1, y1, x2, y2 = map(int, input().split())
x3, y3, x4, y4 = map(int, input().split())

# 한 선분을 기준으로 같은 방향(시계 : -1/반시계 : 1/일직선 : 0)에 위치할 경우 선분은 교차 되지 않고 그렇지 않은 경우 교차(곱한 값이 -1/0이어야 교차)
# 두 선분이 교차하지 않는데 교차한다고 판단이 되는 경우를 막기 위하여 선분 2개를 모두 검사
z1 = ccw([x1, y1], [x2, y2], [x3, y3]) * ccw([x1, y1], [x2, y2], [x4, y4])  # 선분 1에 대해서 교차 판정
z2 = ccw([x3, y3], [x4, y4], [x1, y1]) * ccw([x3, y3], [x4, y4], [x2, y2])  # 선분 2에 대해서 교차 판정

if z1 == 0 and z2 == 0:  # 두 선분이 일직선상에 놓여져 있는 경우
    if max(x1, x2) < min(x3, x4) or min(x1, x2) > max(x3, x4) or max(y1, y2) < min(y3, y4) or min(y1, y2) > max(y3, y4):
        print(0)
    else:                  # 선분이 겹쳐져 있다면 선분 교차 판정 O
        print(1)
elif z1 <= 0 and z2 <= 0:  # 일직선인 경우와 아닌 경우에 겹쳐져 있는 경우 선분 교차 판정
    print(1)
else:        # 선분이 아예 겹쳐 있지 않은 경우
    print(0)
